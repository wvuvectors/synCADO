#! /usr/bin/env bash

here=$(dirname "$0")
. "$here/version"



while getopts ":hvdg:f:t:o:a:" opt; do
	case $opt in
		h)
			echo "
synCADO v$VERSION.
Created by $AUTHORS.

Usage:
  synCADO -g FILE -t FILE -f FILE [-o STRING] [-d]
  synCADO -h
  synCADO -v

Options:
  -h          Show this screen.
  -v          Show version.
  -g FILE     REQUIRED path to a tab-delimited file containing one genome per row: RefSeq replicon ID (required), and a text label for the genome (optional).
  -t FILE     REQUIRED path to a tab-delimited file containing one target feature per row: any feature ID in the OG (required), text label (recommended), and hex color code (optional).
  -f FILE     REQUIRED path to a tab-delimited file of IDs that comprise the sequence families, one family per row. The first column of each row must contain a unique family ID.
  -o STRING   Optional name of output [DEFAULT: synCADO_out].
  -a STRING   Optional feature ID that identifies the OG to anchor at the start (left) of each genome [DEFAULT: none].
  -d          Optional flag to retain all temporary files, for debugging [DEFAULT: off].

"
			exit 0
			;;
		v)
			echo "
synCADO: SYNteny Comparison Across Diverse Organisms.
VERSION:  $VERSION.
RELEASED: $RELEASE_DATE.
AUTHORS:  $AUTHORS.

$LICENSE_STR

Please visit https://github.com/driscollmml/synCADO for more information or to download the source code.

"
			exit 0
			;;
		g)
			# tab-delim config file for genomes
			cfgGenomes=$OPTARG
			;;
		t)
			# tab-delim config file for targets OGs of interest
			cfgTargets=$OPTARG
			;;
		f)
			# sequence family file
			familyFile=$OPTARG
			;;
		o)
			# name or title of project
			NAME=$OPTARG
			;;
		a)
			# feature ID to use as anchor OG
			anchorFeature=$OPTARG
			;;
		d)
			# debug mode ON
			debug=1
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

if [ -z "$cfgGenomes" ]; then
	echo "FATAL : A tab-delimited genome config file is required (-g GCFG_FILE) but was not provided."
	echo "NOTE  : See the README, or demo.genomes.txt in the demo directory for an example."
	exit 0
fi

if [ -z "$cfgTargets" ]; then
	echo "FATAL : A tab-delimited target config file is required (-t TCFG_FILE) but was not provided."
	echo "NOTE  : See the README, or demo.targets.txt in the demo directory for an example."
	exit 0
fi

if [ -z "$familyFile" ]; then
	echo "FATAL : A tab-delimited family file (-f) is required but was not provided."
	echo "NOTE  : See the README, or demo.families.txt in the demo directory for an example."
	exit 0
fi

if [ -z "$NAME" ]; then
	echo "WARN  : No output name provided. I'll use the boring default: synCADO_out"
	NAME="synCADO_out"
fi



# create a data dir
OUTDIR="${NAME}"
if [ -d "$OUTDIR" ];then
	rm -r "$OUTDIR"
fi
mkdir "$OUTDIR"


color="255,255,255"
labelit=1
max_elements=0


anchorFamily=-1
if [ -z "$anchorFeature" ]; then
	echo "WARN  : No anchor feature provided. The graphic for each genome may start at a different feature."
	echo "NOTE  : It is often easier to compare genomes if they all start from a common family (eg, dnaA)."
	echo "NOTE  : You can use the -a option to pass the ID of an anchor ortholog from one of your genomes."
	echo "NOTE  : synCADO will extract the corresponding orthologs from the remaining genomes and reorient each genome."
	echo "NOTE  : See the README for more information."
else
	anchorFamily=$("$here/perl/synCADO_get_family.pl" "$anchorFeature" < "$familyFile")
fi



# convert target feature IDs into family IDs
# store this in a temp file, "targets.tmp"
targetFile="$OUTDIR/targets.tmp"
if [ -f "$targetFile" ];then
	rm "$targetFile"
fi
echo "#family	label	color_code" > "$targetFile"

while IFS=$'\t' read -r -a tmp
do
	featID="${tmp[0]}"
	flabel="${tmp[1]}"
	fcolor="${tmp[2]}"

	if [[ $featID =~ ^# ]]; then
		continue
	fi
	
	famID=$("$here/perl/synCADO_get_family.pl" "$featID" < "$familyFile")
	echo "$famID	$flabel	$fcolor" >> "$targetFile"
done < $cfgTargets


# loop through each genome in the genomes file
while IFS=$'\t' read -r -a tmp
do
	nucRef="${tmp[0]}"
	if [[ $nucRef =~ ^# ]]; then
		continue
	fi
	
	chr="$nucRef"
	gffFile="$nucRef"
	
	if [ -f "$gffFile" ]; then
		# user supplied a path to a gff file
		chr=$("$here/perl/synCADO_gff_parse.pl" "chr" < "$gffFile")
	else
		# user supplied a refseq id, so we need to fetch it from NCBI
		chr="$nucRef"
		gffFile="$OUTDIR/$nucRef.gff"
		
		# fetch the feature table
		wget --tries=5 "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=${nucRef}&rettype=ft" -O "$OUTDIR/$chr.ncbi_ft.txt"
	
		# convert feature table to gff format
		"$here/perl/synCADO_ft2gff.pl" < "$OUTDIR/$chr.ncbi_ft.txt" > "$gffFile"
	fi
	
	len=$("$here/perl/synCADO_gff_parse.pl" "len" < "$gffFile")

	# extract relevant info from the gff file
	"$here/perl/synCADO_extract_col.pl" 0,2,3,4,6,8 < "$gffFile" | grep '\tCDS\t' \
	| grep -v 'pseudo=true' \
	| grep 'protein_id=' \
	| perl -pe 's/^(.+?)\tCDS\t(\d+)\t(\d+)\t(.+?)\t.*?product=(.+?);.*?protein_id=(.+?);.*$/$1\t$2\t$3\t$4\t$5\t$6/gi' \
	| perl -pe 's/^(.+?)\tCDS\t(\d+)\t(\d+)\t(.+?)\t.*?protein_id=(.+?);.*?product=(.+?);.*$/$1\t$2\t$3\t$4\t$6\t$5/gi' \
	| perl -pe 's/fig\|//gi' \
	| "$here/perl/synCADO_fix_overlaps.pl" 1 2 > "${OUTDIR}/$chr.features.1.tmp"
	#
	# feature table 1 cols:
	# chr	start_pos	end_pos	strand	feature_ann	feature_id
	
	
	# add family assignments
	#
	"$here/perl/synCADO_add_families.pl" -i 5 "$familyFile" < "${OUTDIR}/$chr.features.1.tmp" > "${OUTDIR}/$chr.features.2.tmp"
	#
	# feature table 2 cols:
	# chr	start_pos	end_pos	strand	feature_ann	feature_id	family_id


	# add custom colors and labels
	#
	"$here/perl/synCADO_decorate.pl" "$targetFile" < "${OUTDIR}/$chr.features.2.tmp" > "${OUTDIR}/$chr.features.3.tmp"
	#
	# feature table 3 cols:
	# chr	start_pos	end_pos	strand	feature_ann	feature_id	family_id	color_code	family_label
	

	# apply anchor offset to coordinates, if necessary
	#
	if [ ! -z "$anchorFeature" ];then
		anchorFamily=$("$here/perl/synCADO_get_family.pl" "$anchorFeature" < "$familyFile")
		"$here/perl/synCADO_offset.pl" -a "$anchorFamily" -c -l $len < "${OUTDIR}/$chr.features.3.tmp" | "$here/perl/synCADO_sort.pl" -n 1 > "${OUTDIR}/$chr.features.txt"
	else
		cp "${OUTDIR}/$chr.features.3.tmp" "${OUTDIR}/$chr.features.txt"
	fi
	#
	# feature table 4 cols:
	# chr	offset_start_pos	offset_end_pos	strand	feature_ann	feature_id	family_id	color_code	family_label


	# compress consecutive off-target features
	#
	"$here/perl/synCADO_compress.pl" 8 -t 2 < "${OUTDIR}/$chr.features.txt" > "${OUTDIR}/$chr.features_compressed.txt"
	#
	# feature table 5 cols:
	# chr	offset_start_pos	offset_end_pos	strand	feature_ann	feature_id	family_id	color_code	family_label

	
	# get the number of elements (genes and gene stretches) in the largest compressed genome
	# this is used to scale the output properly
	num_elements=`wc -l < ${OUTDIR}/$chr.features_compressed.txt | bc`
	if [ "$num_elements" -gt "$max_elements" ]; then
		max_elements=$num_elements
	fi

done < $cfgGenomes


# initialize variables for the synteny vis output
synvis_genomes=`wc -l < $cfgGenomes | bc`
synvis_genomes=$((synvis_genomes-1))

synvis_h=32
synvis_start_x=0
synvis_start_y=20
synvis_locus_w=50
synvis_box_gap=10
synvis_genome_gap=50
synvis_canvas_w=$((synvis_start_x+(max_elements*(synvis_locus_w+synvis_box_gap))))
synvis_canvas_h=$((synvis_genomes*(synvis_h+synvis_genome_gap)))
synvis_font_s=12

synvis_multi_w=50
synvis_multi_re='^[0-9]+$'

# write the header of the synCADO html file
cat > "${OUTDIR}/$NAME.html" <<EOL
<!DOCTYPE html>
<head></head><body>
<canvas id="blockCanvas" width="$synvis_canvas_w" height="$synvis_canvas_h" style="border:1px solid #ffffff;position:absolute;left:0;top:0;z-index:1;">Your browser does not support the HTML5 canvas tag.</canvas>
<canvas id="lineCanvas" width="$synvis_canvas_w" height="$synvis_canvas_h" style="border:1px solid #ffffff;position:absolute;left:0;top:0;z-index:0;">Your browser does not support the HTML5 canvas tag.</canvas>
<script>
window.onload = function() {
	var canvas = document.getElementById("blockCanvas");
	var ctx = canvas.getContext("2d");
	var canvas2 = document.getElementById("lineCanvas");
	var ctx2 = canvas2.getContext("2d");
EOL



while IFS=$'\t' read -r -a tmpG
do
	nucRef="${tmpG[0]}"
	if [[ $nucRef =~ ^# ]]; then
		continue
	fi
	
	chr="$nucRef"
	if [ -f "$nucRef" ]; then
		# user supplied a path to a gff file
		chr=$("$here/perl/synCADO_gff_parse.pl" "chr" < "$nucRef")
	fi
	
	title="$chr"
	if [ ! -z "${tmpG[1]}" ]; then
		title="${tmpG[1]} ($chr)"
	fi
	
	tax_start_y=$((synvis_start_y-5))
	line_y=$((synvis_start_y+(synvis_h/2)))

	space=" "
	synvis_tax=${title//_/$space}    

	# write to synvis file
		cat >> "${OUTDIR}/$NAME.html" <<EOL

	/* draw the blocks */
	ctx.font = "normal 14px Arial";
	ctx.fillStyle = "#000000";
	ctx.fillText("$synvis_tax", 0, $tax_start_y);
	ctx.font = "bold ${synvis_font_s}px Arial";
EOL
	
	box_x=synvis_start_x
	while IFS=$'\t' read -r -a tmp
	do
		gchr="${tmp[0]}"
		gstart="${tmp[1]}"
		gstop="${tmp[2]}"
		gstrnd="${tmp[3]}"
		gann="${tmp[4]}"
		gacc="${tmp[5]}"
		gaa="${tmp[6]}"
		gcolor="${tmp[7]}"
		glabel="${tmp[8]}"
		

		if [[ "$glabel" =~ $synvis_multi_re ]];then
			box_x=$((box_x+(synvis_multi_w+synvis_box_gap)))
		else
			box_x=$((box_x+(synvis_locus_w+synvis_box_gap)))
		fi
		
		box_y=$((synvis_start_y))
		box_fill_c="#FFFFFF"
		
		lab_x=$((box_x+8))
		lab_y=$((box_y+(synvis_h/2)+4))
		lab_font_s=$((synvis_font_s))
		lab_font_c="#000000"

		if [[ "$glabel" =~ $synvis_multi_re ]];then
			box_fill_c="#000000"
			lab_font_c="#ffffff"
			lnx=`echo "l($glabel)" | bc -l`
			lab_font_s=`echo "scale=1;((1.6*$lnx)+11.5)" | bc`
			lab_font_s=`echo "scale=1;$lab_font_s" | bc`
			if [ 1 -eq "$(echo "${lab_font_s} > 20.0" | bc)" ];then
				lab_font_s="20"
			fi
			lab_x=`echo "scale=1;($box_x+14-($lab_font_s-$synvis_font_s))" | bc`
			lab_x=`echo "scale=1;$lab_x" | bc`
			lab_y=$((box_y+(synvis_h/2)+6))

		fi
		
		cat >> "${OUTDIR}/$NAME.html" <<EOL
	ctx.beginPath();
	ctx.strokeStyle = "#$gcolor";
	ctx.lineWidth = "5";
	ctx.rect($box_x, $box_y, $synvis_locus_w, $synvis_h);
	ctx.stroke();
	ctx.fillStyle = "$box_fill_c";
	ctx.fillRect($box_x, $box_y, $synvis_locus_w, $synvis_h);
	ctx.font = "bold ${lab_font_s}px Arial";
	ctx.fillStyle = "$lab_font_c";
	ctx.fillText("$glabel", $lab_x, $lab_y);
EOL
		
		#((box_num++))
		
	done < "${OUTDIR}/$chr.features_compressed.txt"
	
	start_x=$((synvis_start_x+synvis_locus_w+synvis_box_gap))
	line_x=$((box_x+10))
	
		cat >> "${OUTDIR}/$NAME.html" <<EOL
	/* draw the genome line */
	ctx2.lineWidth=2;
	ctx2.strokeStyle = "#999999";
	ctx2.beginPath();
	ctx2.moveTo($start_x, $line_y);
	ctx2.lineTo($line_x, $line_y);
	ctx2.stroke();
EOL
	
	synvis_start_y=$((synvis_start_y+synvis_h+synvis_genome_gap))

done < $cfgGenomes

# close the synCADO html file writer
cat >> "${OUTDIR}/$NAME.html" <<EOL
};</script></body></html>
EOL


if [ -z "$debug" ]; then
	rm -r "${OUTDIR}/*.tmp"
fi


exit 1

