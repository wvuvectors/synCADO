#! /usr/bin/env bash

here=$(dirname "$0")
. "$here/version"



while getopts ":hvc:t:o:" opt; do
	case $opt in
		h)
			echo "
synCADOfb, part of synCADO v$VERSION.
Created by $AUTHORS.

Usage:
  synCADOfb -c STRING -t FILE
  synCADOfb -h
  synCADOfb -v

Options:
  -h          Show this screen.
  -v          Show version.
  -c STRING   REQUIRED NCBI taxonomic id setting the CLADE for orthoDB accession. Must encompass all the taxa given in -t.
  -t FILE     REQUIRED file containing a list of NCBI taxonomy ids comprising the OG set.
  -o STRING   RECOMMENDED name of output file. Can be used directly in synCADO.

"
			exit 0
			;;
		v)
			echo "
synCADOfb: Ortholog family builder for use with synCADO.
VERSION:  $VERSION.
RELEASED: $RELEASE_DATE.
AUTHORS:  $AUTHORS.

$LICENSE_STR

Please visit https://github.com/driscollmml/synCADO for more information or to download the source code.

"
			exit 0
			;;
		c)
			# orthoDB clade
			clade=$OPTARG
			;;
		t)
			# file containing list of input NCBI taxonomy ids
			taxFile=$OPTARG
			;;
		o)
			# name of output file
			outfile=$OPTARG
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

if [ -z "$clade" ]; then
	echo "FATAL : An NCBI taxonomy id to serve as the enclosing CLADE is required (-c CLADE) but was not provided."
	echo "NOTE  : See the README for more information."
	exit 0
fi

if [ -z "$taxFile" ]; then
	echo "FATAL : A file containing NCBI taxonomy ids to include in the OG set is required (-t TAX_FILE) but was not provided."
	echo "NOTE  : See the README for more information."
	exit 0
fi

if [ -z "$outfile" ]; then
	echo "WARN  : No output file name provided. I'll just use the default: synCADO_fams.$clade.txt."
	outfile="synCADO_fams.$clade.txt"
fi


# create a tmp dir
TMPDIR="synCADO_tmp"
if [ -d "$TMPDIR" ];then
	rm -r "$TMPDIR"
fi
mkdir "$TMPDIR"

if [ -f "$TMPDIR/log_odb" ];then
	rm -r "$TMPDIR/log_odb"
fi

while IFS=$'\t' read -r -a taxids
do
	taxid="${taxids[0]}"
	if [[ $taxid =~ ^# ]]; then
		continue
	fi
	if [[ $taxid =~ ^\s*$ ]]; then
		continue
	fi
	
	# get the cluster ids for each species, given the user-supplied clade.
	cidlist=$(wget --tries=10 "https://v100.orthodb.org/search?level=${clade}&species=${taxid}&limit=100000"  -a "$TMPDIR/log_odb" -O - \
	| perl -pe 's/^.+?\[(.+?)\].*$/\1/gi' \
	| perl -pe 's/"//gi' \
	| perl -pe 's/,\s*/\t/gi')
	
	echo "$taxid	$cidlist" >> "$TMPDIR/clusters_by_tax.$clade.txt"
	
done < $taxFile

# calculate a presence/absence grid (taxa vs OGid)
synCADOfb_transpose.pl < "$TMPDIR/clusters.$clade.txt" > "$TMPDIR/pagrid.fam2tax.txt"
synCADOfb_pagrid.pl < "$TMPDIR/clusters.$clade.txt" > "$TMPDIR/pagrid.fam2tax.txt"


# get the protein ids for each OG, by taxon
synCADOfb_tax2ukb.pl < "$TMPDIR/pagrid.fam2tax.txt" > "$TMPDIR/pagrid.fam2upkb.txt"


# convert protein ids from orthodb (ACC+ID) to RefSeq protein (P_REFSEQ_AC) using interpro api
synCADOfb_ukb2ncbi.pl < "$TMPDIR/pagrid.fam2upkb.txt" > "$outfile"


# print the synCADO family table (id followed by tab-delim ids)


exit

